import { Elysia } from "elysia";
import { getAllTenantsWithUser } from "../controllers/tenantController";
import { AppDataSource } from "../db";
import { IncomingForm } from "formidable";
import path from "path";
import fs from "fs";

const uploadDir = path.resolve(process.cwd(), "uploads");
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• form + file
const parseFormData = (
  req: any
): Promise<{
  fields: Record<string, any>;
  files: Record<string, import("formidable").File[]>; // ‡∏´‡∏£‡∏∑‡∏≠ File[] ‡∏ñ‡πâ‡∏≤ import ‡πÅ‡∏•‡πâ‡∏ß
}> => {
  return new Promise((resolve, reject) => {
    const form = new IncomingForm(); // ‚úÖ ‡πÉ‡∏ä‡πâ IncomingForm ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    form.uploadDir = uploadDir;
    form.keepExtensions = true;

    form.parse(req, (err, fields, files) => {
      if (err) return reject(err);
      resolve({ fields, files });
    });
  });
};

export const tenantRoute = new Elysia().group("/tenantInfo", (app) => {
  // app.get("/room_number", async () => {
  //   try {
  //     const query = `
  //       SELECT
  //         tenant_id,
  //         room_number,
  //         user_id,
  //         (SELECT user_name FROM users WHERE users.user_id = tenant_info.user_id) AS user_name
  //         FROM tenant_info
  //     `;
  //     const results = await AppDataSource.query(query);
  //     return results;
  //   } catch (err) {
  //     console.error("Error fetching room numbers:", err);
  //     return { error: "Database error" };
  //   }
  // });

  //===================================================================================================================
  // üîπ GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  app.get("/all", async () => {
    try {
      const tenants = await getAllTenantsWithUser();
      return tenants;
    } catch (error: any) {
      console.error("‚ùå Error fetching tenants:", error.message);
      return { error: "Failed to fetch tenants", code: 500 };
    }
  });
  // ========================================‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà===========================================================================
  // üîπ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
  app.post("/add", async ({ request }) => {
    try {
      const form = await request.formData();

      const user_id = form.get("user_id")?.toString();
      const room_number = form.get("room_number")?.toString();
      const rental_contract_type = form.get("rental_contract_type")?.toString();
      const moving_in_raw = form.get("moving_in")?.toString();
      const moving_in = moving_in_raw?.substring(0, 10);

      const image_idcard = form.get("image_idcard");
      const image_rental_contract = form.get("image_rental_contract");

      if (
        !user_id ||
        !room_number ||
        !rental_contract_type ||
        !moving_in ||
        !(image_idcard instanceof File) ||
        !(image_rental_contract instanceof File)
      ) {
        return { error: "Missing required fields or files", code: 400 };
      }

      const idcardBuffer = Buffer.from(await image_idcard.arrayBuffer());
      const contractBuffer = Buffer.from(
        await image_rental_contract.arrayBuffer()
      );

      await AppDataSource.query(
        `INSERT INTO comsci32.tenant_info (
          user_id, room_number, rental_contract_type, image_idcard, image_rental_contract, moving_in
        ) VALUES (?, ?, ?, ?, ?, ?)`,
        [
          user_id,
          room_number,
          rental_contract_type,
          idcardBuffer,
          contractBuffer,
          moving_in,
        ]
      );

      return {
        message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        data: { user_id, room_number, rental_contract_type, moving_in },
      };
    } catch (error: any) {
      console.error("‚ùå Error adding tenant:", error.message);
      return {
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤",
        details: error.message,
      };
    }
  });

  app.post("/showuser/:id", async ({ params }) => {
    const userId = Number(params.id);
    const rows = await AppDataSource.query(
      "SELECT * FROM comsci32.users WHERE user_id = ?",
      [userId]
    );

    // ‡∏ñ‡πâ‡∏≤ rows ‡πÄ‡∏õ‡πá‡∏ô array
    return rows[0] || { message: "User not found" };

    // ‡∏ñ‡πâ‡∏≤ rows ‡πÄ‡∏õ‡πá‡∏ô object (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏à‡∏≠)
  });
  app.get("/allUsers", async () => {
    try {
      const results = await AppDataSource.query(
        "SELECT user_id, user_name FROM comsci32.users"
      );
      return results;
    } catch (err: any) {
      console.error("‚ùå Error fetching all users:", err.message);
      return {
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
        details: err.message,
      };
    }
  });

  // ===========================================‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤=================================================================================
  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
  app.put("/EditTenantForm/:id", async ({ params, request }) => {
    try {
      const { id } = params;
      const form = await request.formData();

      const user_id = form.get("user_id")?.toString();
      const room_number = form.get("room_number")?.toString();
      const rental_contract_type = form.get("rental_contract_type")?.toString();
      const moving_in_raw = form.get("moving_in")?.toString();
      const moving_in = moving_in_raw?.substring(0, 10);

      const image_idcard = form.get("image_idcard");
      const image_rental_contract = form.get("image_rental_contract");

      const updates: string[] = [];
      const values: any[] = [];

      if (user_id) {
        updates.push("user_id = ?");
        values.push(user_id);
      }
      if (room_number) {
        updates.push("room_number = ?");
        values.push(room_number);
      }
      if (rental_contract_type) {
        updates.push("rental_contract_type = ?");
        values.push(rental_contract_type);
      }
      if (moving_in) {
        updates.push("moving_in = ?");
        values.push(moving_in);
      }

      if (image_idcard instanceof File) {
        const buffer = Buffer.from(await image_idcard.arrayBuffer());
        updates.push("image_idcard = ?");
        values.push(buffer);
      }

      if (image_rental_contract instanceof File) {
        const buffer = Buffer.from(await image_rental_contract.arrayBuffer());
        updates.push("image_rental_contract = ?");
        values.push(buffer);
      }

      if (updates.length === 0) {
        return { message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", code: 400 };
      }

      values.push(id);

      await AppDataSource.query(
        `UPDATE comsci32.tenant_info SET ${updates.join(
          ", "
        )} WHERE tenant_id = ?`,
        values
      );

      return { message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
    } catch (error: any) {
      console.error("‚ùå Error updating tenant:", error.message);
      return {
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤",
        details: error.message,
      };
    }
  });

  app.get("/image/:tenant_id", async ({ params, query }) => {
    const { tenant_id } = params;
    const { type } = query; // idcard ‡∏´‡∏£‡∏∑‡∏≠ contract

    if (!["idcard", "contract"].includes(type)) {
      return {
        error: "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (type ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô idcard ‡∏´‡∏£‡∏∑‡∏≠ contract)",
      };
    }

    const fieldName =
      type === "idcard" ? "image_idcard" : "image_rental_contract";

    try {
      const result = await AppDataSource.query(
        `SELECT ?? AS image FROM comsci32.tenant_info WHERE tenant_id = ?`,
        [fieldName, tenant_id]
      );

      if (!result || !result[0] || !result[0].image) {
        return { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" };
      }

      const imageBuffer = result[0].image;
      const base64 = `data:image/jpeg;base64,${Buffer.from(
        imageBuffer
      ).toString("base64")}`;

      return { base64 };
    } catch (err: any) {
      console.error("‚ùå Error fetching image:", err.message);
      return { error: "‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", detail: err.message };
    }
  });

  app.get("/name/:id", async ({ params }) => {
    const { id } = params;

    try {
      const result = await AppDataSource.query(
        "SELECT user_name FROM comsci32.users WHERE user_id = ?",
        [id]
      );

      if (result.length === 0) {
        return { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" };
      }

      return { user_name: result[0].user_name };
    } catch (err: any) {
      console.error("‚ùå Error fetching user name:", err.message);
      return { error: "‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", details: err.message };
    }
  });

  // üîπ DELETE: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ tenant_id
  app.delete("/delete/:tenant_id", async ({ params }) => {
    const { tenant_id } = params;

    try {
      const result = await AppDataSource.query(
        "DELETE FROM comsci32.tenant_info WHERE tenant_id = ?",
        [tenant_id]
      );

      if (result.affectedRows === 0) {
        return { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", code: 404 };
      }

      return { message: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
    } catch (error) {
      console.error("‚ùå Error deleting tenant:", error);
      return {
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤",
        details: error.message,
      };
    }
  });

  return app;
});
