import { Elysia } from "elysia";
import { AppDataSource } from "../db";
import { getAllMaintenanceFeesWithUser } from "../controllers/maintenanceController";
import { verifyToken } from "../middlewares/verifyToken";
const MAX_FILE_SIZE = 5 * 1024 * 1024; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô 5MB

export const maintenanceRoute = new Elysia().group(
  "/maintenancefees",
  (app) => {
    console.log("üîê maintenanceRoute group /maintenancefees is loaded");

    // ‚úÖ 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    app.get("/maintenanceFeesAll", async () => {
      try {
        const maintenanceFees = await getAllMaintenanceFeesWithUser();
        return maintenanceFees;
      } catch (error: any) {
        console.error("‚ùå Error fetching maintenance fees:", error.message);
        return { error: "Failed to fetch maintenance fees", code: 500 };
      }
    });

    // ‚úÖ 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    app.post("/add", async ({ request }) => {
      try {
        const form = await request.formData();

        const tenant_id = form.get("tenant_id")?.toString();
        const created_at_raw = form.get("created_at")?.toString();
        const created_at = created_at_raw?.substring(0, 10);
        const total_amount = form.get("total_amount")?.toString();
        const status_maintenance_fees = form
          .get("status_maintenance_fees")
          ?.toString();
        const money_maintenance_fees_slip = form.get(
          "money_maintenance_fees_slip"
        );

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÜ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå)
        if (
          !tenant_id ||
          !total_amount ||
          !created_at ||
          !status_maintenance_fees
        ) {
          return { error: "Missing required fields", code: 400 };
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå
        let slipBuffer: Buffer | null = null;
        if (money_maintenance_fees_slip instanceof File) {
          if (money_maintenance_fees_slip.size > MAX_FILE_SIZE) {
            return {
              error: "‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB",
              code: 400,
            };
          }

          slipBuffer = Buffer.from(
            await money_maintenance_fees_slip.arrayBuffer()
          );
        }

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ DB ‡πÇ‡∏î‡∏¢ slipBuffer ‡πÄ‡∏õ‡πá‡∏ô null ‡πÑ‡∏î‡πâ
        await AppDataSource.query(
          `INSERT INTO comsci32.maintenance_fees (
            tenant_id, created_at, status_maintenance_fees, money_maintenance_fees_slip, total_amount
          ) VALUES (?, ?, ?, ?, ?)`,
          [
            tenant_id,
            created_at,
            status_maintenance_fees,
            slipBuffer,
            total_amount,
          ]
        );

        return {
          message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          data: {
            tenant_id,
            total_amount,
            created_at,
            status_maintenance_fees,
          },
        };
      } catch (error: any) {
        console.error("‚ùå Error adding maintenance bill:", error.message);
        return {
          error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏¥‡∏•",
          details: error.message,
          code: 500,
        };
      }
    });

    // ‚úÖ 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    app.put("/edit/:id", async ({ params, request }) => {
      try {
        const { id } = params;
        const form = await request.formData();

        const fields: string[] = [];
        const values: any[] = [];

        const tenant_id = form.get("tenant_id")?.toString();
        const created_at_raw = form.get("created_at")?.toString();
        const created_at = created_at_raw?.substring(0, 10);
        const total_amount = form.get("total_amount")?.toString();
        const status_maintenance_fees = form
          .get("status_maintenance_fees")
          ?.toString();
        const money_maintenance_fees_slip = form.get(
          "money_maintenance_fees_slip"
        );

        if (tenant_id) {
          fields.push("tenant_id = ?");
          values.push(tenant_id);
        }
        if (created_at) {
          fields.push("created_at = ?");
          values.push(created_at);
        }
        if (total_amount) {
          fields.push("total_amount = ?");
          values.push(total_amount);
        }
        if (status_maintenance_fees) {
          fields.push("status_maintenance_fees = ?");
          values.push(status_maintenance_fees);
        }
        if (money_maintenance_fees_slip instanceof File) {
          const slipBuffer = Buffer.from(
            await money_maintenance_fees_slip.arrayBuffer()
          );
          fields.push("money_maintenance_fees_slip = ?");
          values.push(slipBuffer);
        }

        if (fields.length === 0) {
          return { message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", code: 400 };
        }

        values.push(id);

        await AppDataSource.query(
          `UPDATE comsci32.maintenance_fees SET ${fields.join(
            ", "
          )} WHERE id_maintenance_fees = ?`,
          values
        );

        return { message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
      } catch (error: any) {
        console.error("‚ùå Error updating maintenance fees:", error.message);
        return {
          error: "Failed to update maintenance fees",
          details: error.message,
        };
      }
    });

    app.get("/image/:tenant_id", async ({ params, query }) => {
      const { tenant_id } = params;
      const { type } = query; // money_maintenance_fees_slip

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ type ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!["money_maintenance_fees_slip"].includes(type)) {
        return {
          error:
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (type ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô money_maintenance_fees_slip)",
        };
      }

      const fieldName = "money_maintenance_fees_slip"; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

      try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
        const result = await AppDataSource.query(
          `SELECT ${fieldName} AS image FROM comsci32.maintenance_fees WHERE tenant_id = ?`,
          [tenant_id]
        );

        if (!result || !result[0] || !result[0].image) {
          return { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" };
        }

        const imageBuffer = result[0].image;
        const base64 = `data:image/jpeg;base64,${Buffer.from(
          imageBuffer
        ).toString("base64")}`;

        return { base64 };
      } catch (err: any) {
        console.error("‚ùå Error fetching image:", err.message);
        return { error: "‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", detail: err.message };
      }
    });

    app.put("/updateStatus/:id", async ({ params, request }) => {
      try {
        const { id } = params;
        const { status_maintenance_fees } = await request.json();

        if (!status_maintenance_fees) {
          return { error: "Missing status_maintenance_fees", code: 400 };
        }

        await AppDataSource.query(
          `UPDATE comsci32.maintenance_fees SET status_maintenance_fees = ? WHERE id_maintenance_fees = ?`,
          [status_maintenance_fees, id]
        );

        return { message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
      } catch (err) {
        console.error("‚ùå Error updating status:", err.message);
        return { error: "Failed to update status", details: err.message };
      }
    });

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞ user_id
    app.get(
      "/user-maintenance-bills/:user_id",
      async ({ params, request, set }) => {
        const { user_id } = params;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user_id ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!user_id) {
          set.status = 400;
          return { error: "user_id is required", code: 400 };
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏à‡∏≤‡∏Å header
        const result = verifyToken(request);
        if (!result.valid) {
          set.status = 401;
          return { error: "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï", detail: result.error };
        }

        const tokenUserId = result.payload?.user_id;
        if (!tokenUserId || String(tokenUserId) !== String(user_id)) {
          set.status = 403;
          return { error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ" };
        }

        try {
          const result = await AppDataSource.query(
            `
        SELECT 
          mf.id_maintenance_fees,
          mf.tenant_id,
          ti.room_number,
          us.user_name,
          mf.total_amount,
          mf.created_at,
          mf.status_maintenance_fees,
          TO_BASE64(mf.money_maintenance_fees_slip) AS money_maintenance_fees_slip
        FROM comsci32.maintenance_fees mf
        LEFT JOIN comsci32.tenant_info ti ON mf.tenant_id = ti.tenant_id
        LEFT JOIN comsci32.users us ON ti.user_id = us.user_id
        WHERE us.user_id = ?
        ORDER BY mf.created_at DESC
        `,
            [user_id]
          );

          return result;
        } catch (error: any) {
          console.error(
            "‚ùå Error fetching user maintenance fees:",
            error.message
          );
          return {
            error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
            details: error.message,
            code: 500,
          };
        }
      }
    );

    // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    app.delete("/delete/:id", async ({ params }) => {
      const { id } = params;
      try {
        await AppDataSource.query(
          `DELETE FROM comsci32.maintenance_fees WHERE id_maintenance_fees = ?`,
          [id]
        );
        return { message: "‡∏•‡∏ö‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
      } catch (error: any) {
        console.error("\u274C Error deleting maintenance fees:", error.message);
        return {
          error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏¥‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÑ‡∏î‡πâ",
          details: error.message,
        };
      }
    });
 
    return app;
  }
);
